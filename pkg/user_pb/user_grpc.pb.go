// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServerClient is the client API for UserServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServerClient interface {
	GetToken(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error)
	IsAuthorised(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginStatus, error)
	NewUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*UserId, error)
	UpdateUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Status, error)
	GetFullUserData(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserData, error)
	GetPartUserData(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserDataS, error)
}

type userServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerClient(cc grpc.ClientConnInterface) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) GetToken(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, "/api.user_server/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) IsAuthorised(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, "/api.user_server/IsAuthorised", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) NewUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/api.user_server/NewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.user_server/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.user_server/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetFullUserData(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/api.user_server/GetFullUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetPartUserData(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserDataS, error) {
	out := new(UserDataS)
	err := c.cc.Invoke(ctx, "/api.user_server/GetPartUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServer is the server API for UserServer service.
// All implementations should embed UnimplementedUserServerServer
// for forward compatibility
type UserServerServer interface {
	GetToken(context.Context, *LoginData) (*LoginStatus, error)
	IsAuthorised(context.Context, *Token) (*LoginStatus, error)
	NewUser(context.Context, *LoginData) (*UserId, error)
	UpdateUser(context.Context, *UserData) (*Status, error)
	DeleteUser(context.Context, *UserId) (*Status, error)
	GetFullUserData(context.Context, *UserId) (*UserData, error)
	GetPartUserData(context.Context, *UserId) (*UserDataS, error)
}

// UnimplementedUserServerServer should be embedded to have forward compatible implementations.
type UnimplementedUserServerServer struct {
}

func (UnimplementedUserServerServer) GetToken(context.Context, *LoginData) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedUserServerServer) IsAuthorised(context.Context, *Token) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorised not implemented")
}
func (UnimplementedUserServerServer) NewUser(context.Context, *LoginData) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedUserServerServer) UpdateUser(context.Context, *UserData) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServerServer) DeleteUser(context.Context, *UserId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServerServer) GetFullUserData(context.Context, *UserId) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUserData not implemented")
}
func (UnimplementedUserServerServer) GetPartUserData(context.Context, *UserId) (*UserDataS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartUserData not implemented")
}

// UnsafeUserServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServer will
// result in compilation errors.
type UnsafeUserServerServer interface {
	mustEmbedUnimplementedUserServerServer()
}

func RegisterUserServerServer(s grpc.ServiceRegistrar, srv UserServerServer) {
	s.RegisterService(&UserServer_ServiceDesc, srv)
}

func _UserServer_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetToken(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_IsAuthorised_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).IsAuthorised(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/IsAuthorised",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).IsAuthorised(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).NewUser(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetFullUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetFullUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/GetFullUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetFullUserData(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetPartUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetPartUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user_server/GetPartUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetPartUserData(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServer_ServiceDesc is the grpc.ServiceDesc for UserServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user_server",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _UserServer_GetToken_Handler,
		},
		{
			MethodName: "IsAuthorised",
			Handler:    _UserServer_IsAuthorised_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _UserServer_NewUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserServer_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServer_DeleteUser_Handler,
		},
		{
			MethodName: "GetFullUserData",
			Handler:    _UserServer_GetFullUserData_Handler,
		},
		{
			MethodName: "GetPartUserData",
			Handler:    _UserServer_GetPartUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
