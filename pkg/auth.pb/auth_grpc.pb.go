// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: auth.proto

package auth_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServerClient is the client API for AuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServerClient interface {
	GetToken(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error)
	IsAuthorised(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginStatus, error)
	NewUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error)
}

type authServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServerClient(cc grpc.ClientConnInterface) AuthServerClient {
	return &authServerClient{cc}
}

func (c *authServerClient) GetToken(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, "/api.auth_server/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) IsAuthorised(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, "/api.auth_server/IsAuthorised", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServerClient) NewUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, "/api.auth_server/NewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerServer is the server API for AuthServer service.
// All implementations should embed UnimplementedAuthServerServer
// for forward compatibility
type AuthServerServer interface {
	GetToken(context.Context, *LoginData) (*LoginStatus, error)
	IsAuthorised(context.Context, *Token) (*LoginStatus, error)
	NewUser(context.Context, *LoginData) (*LoginStatus, error)
}

// UnimplementedAuthServerServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServerServer struct {
}

func (UnimplementedAuthServerServer) GetToken(context.Context, *LoginData) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthServerServer) IsAuthorised(context.Context, *Token) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorised not implemented")
}
func (UnimplementedAuthServerServer) NewUser(context.Context, *LoginData) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}

// UnsafeAuthServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServerServer will
// result in compilation errors.
type UnsafeAuthServerServer interface {
	mustEmbedUnimplementedAuthServerServer()
}

func RegisterAuthServerServer(s grpc.ServiceRegistrar, srv AuthServerServer) {
	s.RegisterService(&AuthServer_ServiceDesc, srv)
}

func _AuthServer_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth_server/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).GetToken(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_IsAuthorised_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).IsAuthorised(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth_server/IsAuthorised",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).IsAuthorised(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServer_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth_server/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).NewUser(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServer_ServiceDesc is the grpc.ServiceDesc for AuthServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth_server",
	HandlerType: (*AuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthServer_GetToken_Handler,
		},
		{
			MethodName: "IsAuthorised",
			Handler:    _AuthServer_IsAuthorised_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _AuthServer_NewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
